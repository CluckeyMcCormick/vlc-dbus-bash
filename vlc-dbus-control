#!/bin/bash

# The bus name we'll always be targeting
BUS_NAME="org.mpris.MediaPlayer2.vlc"

# The object path we'll always be targeting.
OBJ_PATH="/org/mpris/MediaPlayer2"

# Interface used to get, and set, properties across all interfaces
PROPS_INTERFACE="org.freedesktop.DBus.Properties"

# Interface used to control the VLC window, and the program overall
WINDOW_INTERFACE="org.mpris.MediaPlayer2"

# Interface used to control the active song
PLAYER_INTERFACE="org.mpris.MediaPlayer2.Player"

# Interface used to control the available tracks
TRACKS_INTERFACE="org.mpris.MediaPlayer2.TrackList"

# Function to get a value. Outputs to stdout and stderr. Return code 0 indicates
# success, other values indicate errors. Takes 2 arguments: first, an interface
# name (one of the "INTERFACE" variables above). Second, a property to retrieve.
# This must be in the format described in dbus-send - i.e. "string:CanQuit".
function _getValue {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $PROPS_INTERFACE.Get \
        string:$1 $2
}

# Function to set a value. Outputs to stdout and stderr. Return code 0 indicates
# success, other values indicate errors. Takes 3 arguments: first, an interface
# name (one of the "INTERFACE" variables above). Second, a property to set. This
# must be in the format described in dbus-send - i.e. "string:CanQuit". Third,
# the value for the property to be set TO. This must also be in the dbus-send
# format.
function _setValue {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $PROPS_INTERFACE.Set \
        string:$1 $2 $3
}

# Utility function to quickly check if a dbus VLC instance is alive and
# available. Return code 0 indicates program is alive, return code 1 indicates
# program is dead/unavailable.
function _isAlive {
    _getValue $WINDOW_INTERFACE string:CanQuit > /dev/null 2>&1
}

# Function to forecefully kill any running VLC instances forcefully.
function _kill {
    pkill vlc
}

# Starts the VLC program if no VLC dbus is alive
function _launch {
    # Check if we're alive
    _isAlive
    # Capture success value
    val=$?
    
    # Now check what the return code was...
    if [ $val -eq 0 ]; then
        # If we were able to query anything at all, then VLC is most likely
        # already running!
        echo "VLC appears to already be running."
    else
        # Otherwise, we need to launch it. Start by killing any other VLC
        # instance - we need to ensure this dbus vlc is the only running
        # instance.
        pkill vlc
        
        # Launch!
        vlc --dbus
    fi
}

# Politely asks the VLC program to quit
function _quit {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $WINDOW_INTERFACE.Quit
}

# Checks the dbus status to see if the dbus program is alive
function _status {
    # Check if we're alive
    _isAlive
    # Capture success value
    val=$?

    # Now check what the return code was...
    if [ $val -eq 0 ]; then
        # If we were able to query anything at all, then VLC is most likely
        # already running!
        echo "VLC appears to be running."
    else
        echo "No DBUS enabled VLC found."
    fi
}

function _pauseplay {
    echo "Pause (or play)"
}

function _next {
    echo "next track"
}

function _prev {
    echo "previous track"
}

function _loopplaylist {
    echo "loop playlist"
}

function _loopsong {
    echo "loop song"
}

function _noloop {
    echo "no loop"
}

function _shuffleon {
    echo "shuffle on"
}

function _shuffleoff {
    echo "shuffle off"
}

function _rate {
    echo "play rate $1"
}

function _volume {
    echo "set volume $1"
}

function _add {
    echo "add song or file $1"
}

function _clear {
    echo "clear playlist"
}

# TODO: Find and remove a SPECIFIC track?

exit_val=0

#
# The following code was based on code written by Bruno Bronosky, originally for
# this stack overflow question:
#
# How do I parse command line arguments in Bash?
#
# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
#
POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        kill)
            _kill
            exit_val=$?
            shift # past argument
            ;;
        launch)
            _launch
            exit_val=$?
            shift # past argument
            ;;
        quit)
            _quit
            exit_val=$?
            shift # past argument
            ;;
        status)
            _status
            exit_val=$?
            shift # past argument
            ;;
        pauseplay)
            _pauseplay
            exit_val=$?
            shift # past argument
            ;;
        next)
            _next
            exit_val=$?
            shift # past argument
            ;;
        prev)
            _prev
            exit_val=$?
            shift # past argument
            ;;
        loopplaylist)
            _loopplaylist
            exit_val=$?
            shift # past argument
            ;;
        loopsong)
            _loopsong
            exit_val=$?
            shift # past argument
            ;;
        noloop)
            _noloop
            exit_val=$?
            shift # past argument
            ;;
        shuffleon)
            _shuffleon
            exit_val=$?
            shift # past argument
            ;;
        shuffleoff)
            _shuffleoff
            exit_val=$?
            shift # past argument
            ;;
        rate)
            _rate "$2"
            exit_val=$?
            shift # past argument
            shift # past value
            ;;
        volume)
            _volume "$2"
            exit_val=$?
            shift # past argument
            shift # past value
            ;;
        add)
            _add "$2"
            exit_val=$?
            shift # past argument
            shift # past value
            ;;
        clear)
            _clear
            exit_val=$?
            shift # past argument
            ;;
        *)
            echo "Unclear option - '$1'. Ignoring..."
            exit_val=1
            shift # past argument
            ;;
    esac
done

exit $exit_val
