#!/bin/bash

# The bus name we'll always be targeting
BUS_NAME="org.mpris.MediaPlayer2.vlc"

# The object path we'll always be targeting.
OBJ_PATH="/org/mpris/MediaPlayer2"

# Interface used to get, and set, properties across all interfaces
PROPS_INTERFACE="org.freedesktop.DBus.Properties"

# Interface used to control the VLC window, and the program overall
WINDOW_INTERFACE="org.mpris.MediaPlayer2"

# Interface used to control the active song
PLAYER_INTERFACE="org.mpris.MediaPlayer2.Player"

# Interface used to control the available tracks
TRACKS_INTERFACE="org.mpris.MediaPlayer2.TrackList"

# Function to get a value. Outputs to stdout and stderr. Return code 0 indicates
# success, other values indicate errors. Takes 2 arguments: first, an interface
# name (one of the "INTERFACE" variables above). Second, a property to retrieve.
# This must be in the format described in dbus-send - i.e. "string:CanQuit".
function _getValue {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $PROPS_INTERFACE.Get \
        string:$1 $2
}

# Function to set a value. Outputs to stdout and stderr. Return code 0 indicates
# success, other values indicate errors. Takes 3 arguments: first, an interface
# name (one of the "INTERFACE" variables above). Second, a property to set. This
# must be in the format described in dbus-send - i.e. "string:CanQuit". Third,
# the value for the property to be set TO. This must also be in the dbus-send
# format.
function _setValue {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $PROPS_INTERFACE.Set \
        string:$1 $2 $3
}

# Utility function to quickly check if a dbus VLC instance is alive and
# available. Return code 0 indicates program is alive, return code 1 indicates
# program is dead/unavailable.
function _isAlive {
    _getValue $WINDOW_INTERFACE string:CanQuit > /dev/null 2>&1
}

# Function to forecefully kill any running VLC instances forcefully.
function _kill {
    pkill vlc
}

# Starts the VLC program if no VLC dbus is alive
function _launch {
    # Check if we're alive
    _isAlive
    # Capture success value
    val=$?
    
    # Now check what the return code was...
    if [ $val -eq 0 ]; then
        # If we were able to query anything at all, then VLC is most likely
        # already running!
        echo "VLC appears to already be running."
    else
        # Otherwise, we need to launch it. Start by killing any other VLC
        # instance - we need to ensure this dbus vlc is the only running
        # instance.
        pkill vlc
        
        # Launch!
        vlc --dbus
    fi
}

# Politely asks the VLC program to quit
function _quit {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $WINDOW_INTERFACE.Quit
}

# Checks the dbus status to see if the dbus program is alive
function _status {
    # Check if we're alive
    _isAlive
    # Capture success value
    val=$?

    # Now check what the return code was...
    if [ $val -eq 0 ]; then
        # If we were able to query anything at all, then VLC is most likely
        # already running!
        echo "VLC appears to be running."
    else
        echo "No DBUS enabled VLC found."
    fi
}

# Toggle between pausing and playing
function _pauseplay {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $PLAYER_INTERFACE.PlayPause
}

# Go to next track
function _next {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $PLAYER_INTERFACE.Next
}

# Go to previous track
function _prev {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $PLAYER_INTERFACE.Previous
}

# Set the loop mode to loop the whole playlist
function _loopplaylist {
    _setValue $PLAYER_INTERFACE string:LoopStatus variant:string:Playlist
}

# Set the loop mode to loop the current track
function _looptrack {
    _setValue $PLAYER_INTERFACE string:LoopStatus variant:string:Track
}

# Set the loop mode to no looping at all
function _noloop {
    _setValue $PLAYER_INTERFACE string:LoopStatus variant:string:None
}

# Turn on shuffle
function _shuffleon {
    _setValue $PLAYER_INTERFACE string:Shuffle variant:boolean:true
}

# Turn off shuffle
function _shuffleoff {
    _setValue $PLAYER_INTERFACE string:Shuffle variant:boolean:false
}

# Set the rate
function _rate {
    _setValue $PLAYER_INTERFACE string:Rate "variant:double:$1"
}

# Get the rate
function _getrate {
    # Get the rate
    rate=$(_getValue $PLAYER_INTERFACE string:Rate)
    get_val=$?
    
    # Extract the rate from the message. grep -o will spit out only the exact
    # matching text, so we use this to get just the type and the value. Then we
    # can use cut to get just the value.
    rate=$(echo "$rate" | grep -o "double .*" | cut -d' ' -f 2)
    # Output to stdout
    echo $rate
    
    return $get_val
}

# Set the volume
function _volume {
    _setValue $PLAYER_INTERFACE string:Volume "variant:double:$1"
}

# Get the volume
function _getvolume {
    # Get the volume
    volume=$(_getValue $PLAYER_INTERFACE string:Volume)
    get_val=$?
    
    # Extract the rate from the message. grep -o will spit out only the exact
    # matching text, so we use this to get just the type and the value. Then we
    # can use cut to get just the value.
    volume=$(echo "$volume" | grep -o "double .*" | cut -d' ' -f 2)
    # Output to stdout
    echo $volume
    
    return $get_val
}

# Add a song or file
function _add {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $TRACKS_INTERFACE.AddTrack \
        "string:file://$1" "objpath:/org/mpris/MediaPlayer2/TrackList/NoTrack" \
        boolean:false
}

# Add a song or file
function _addplay {
    dbus-send --session --print-reply \
        --dest=$BUS_NAME $OBJ_PATH $TRACKS_INTERFACE.AddTrack \
        "string:file://$1" "objpath:/org/mpris/MediaPlayer2/TrackList/NoTrack" \
        boolean:true
}

# Clear the current playlist
function _clear {
    # Get a list of all the tracks in the playlist
    obj_paths=$(_getValue $TRACKS_INTERFACE string:Tracks)
    
    # For each line in the output...
    while IFS= read -r line; do
        # Check the line. If it's not an object path line, then skip it.
        if [[ ${line} != *"object path"* ]];then
            continue
        fi
        # Otherwise, we've got an object path. Cut it out of the quotes that
        # surround it.
        strip_line=$(echo "$line" | cut -d'"' -f 2)
        
        # Request that the track in question be removed.
        dbus-send --session --print-reply \
            --dest=$BUS_NAME $OBJ_PATH $TRACKS_INTERFACE.RemoveTrack \
            "objpath:$strip_line"
    done <<< "$obj_paths"
}

# TODO: Find and remove a SPECIFIC track?

exit_val=0

#
# The following code was based on code written by Bruno Bronosky, originally for
# this stack overflow question:
#
# How do I parse command line arguments in Bash?
#
# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
#
POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        kill)
            _kill
            exit_val=$?
            shift # past argument
            ;;
        launch)
            _launch
            exit_val=$?
            shift # past argument
            ;;
        quit)
            _quit
            exit_val=$?
            shift # past argument
            ;;
        status)
            _status
            exit_val=$?
            shift # past argument
            ;;
        pauseplay)
            _pauseplay
            exit_val=$?
            shift # past argument
            ;;
        next)
            _next
            exit_val=$?
            shift # past argument
            ;;
        prev)
            _prev
            exit_val=$?
            shift # past argument
            ;;
        loopplaylist)
            _loopplaylist
            exit_val=$?
            shift # past argument
            ;;
        looptrack)
            _looptrack
            exit_val=$?
            shift # past argument
            ;;
        noloop)
            _noloop
            exit_val=$?
            shift # past argument
            ;;
        shuffleon)
            _shuffleon
            exit_val=$?
            shift # past argument
            ;;
        shuffleoff)
            _shuffleoff
            exit_val=$?
            shift # past argument
            ;;
        rate)
            _rate "$2"
            exit_val=$?
            shift # past argument
            shift # past value
            ;;
        getrate)
            _getrate
            exit_val=$?
            shift # past argument
            ;;
        volume)
            _volume "$2"
            exit_val=$?
            shift # past argument
            shift # past value
            ;;
        getvolume)
            _getvolume
            exit_val=$?
            shift # past argument
            ;;
        add)
            _add "$2"
            exit_val=$?
            shift # past argument
            shift # past value
            ;;
        addplay)
            _addplay "$2"
            exit_val=$?
            shift # past argument
            shift # past value
            ;;
        clear)
            _clear
            exit_val=$?
            shift # past argument
            ;;
        *)
            echo "Unclear option - '$1'. Ignoring..."
            exit_val=1
            shift # past argument
            ;;
    esac
done

exit $exit_val
